// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id             String   @id @default(uuid())
  street         String?
  complementary  String?
  street_number  String?
  neighborhood   String?
  city           String?
  state          String?
  zipCode        String?
  referencePoint String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  barbershops Barbershop[]
  customers   Customer[]

  @@map("addresses")
}

model Bank {
  id                String       @id @default(uuid())
  holderName        String?
  holderType        String
  holderDocument    String       @unique
  bank              String?
  branchNumber      String?
  branchCheckDigit  String?
  accountCheckDigit String?
  accountNumber     String?
  type              String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  barbershops       Barbershop[]

  @@map("banks")
}

model Barbershop {
  id              String         @id @default(uuid())
  name            String
  avatar          String?
  code            String?
  email           String
  password        String
  haveLoyalty     Boolean        @default(true)
  fee             Int?           @default(10)
  minutesToCancel Int?           @default(300)
  address         Address?       @relation(fields: [addressId], references: [id])
  slug            String         @unique
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  barbers         Barber[]
  services        Service[]
  schedules       Schedule[]
  bank            Bank?          @relation(fields: [bankId], references: [id])
  addressId       String?
  receiverId      String?
  bankId          String?
  appointments    Appointment[]
  payments        Payment[]
  balances        Balance[]
  orders          Order[]
  plans           Plan[]
  Subscription    Subscription[]

  @@map("barbershops")
}

model Barber {
  id           String         @id @default(uuid())
  name         String?
  barbershop   Barbershop     @relation(fields: [barbershopId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  barbershopId String
  appointments Appointment[]
  payments     Payment[]
  schedules    Schedule[]
  Subscription Subscription[]

  @@map("barbers")
}

model Service {
  id           String        @id @default(uuid())
  name         String?
  description  String?
  timeRequired String?
  amount       Int?
  barbershop   Barbershop    @relation(fields: [barbershopId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  barbershopId String
  appointments Appointment[]
  payments     Payment[]
  plans        Plan[]

  @@map("services")
}

model Schedule {
  id            String         @id @default(uuid())
  time          String?
  weekDay       String?
  limit         Int?
  barber        Barber?        @relation(fields: [barberId], references: [id])
  barbershop    Barbershop     @relation(fields: [barbershopId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  barbershopId  String
  appointments  Appointment[]
  barberId      String?
  subscriptions Subscription[]

  @@map("schedules")
}

model Customer {
  id                      String         @id @default(uuid())
  name                    String?
  email                   String?
  password                String
  phone                   String         @unique
  document                String?
  code                    String?
  avatar                  String?
  address                 Address?       @relation(fields: [addressId], references: [id])
  cardId                  String?
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  addressId               String?
  customerChargeGatewayId String?
  appointments            Appointment[]
  payments                Payment[]
  balances                Balance[]
  Order                   Order[]
  Subscription            Subscription[]

  @@map("customers")
}

model Appointment {
  id           String     @id @default(uuid())
  barber       Barber     @relation(fields: [barberId], references: [id])
  date         DateTime
  service      Service?   @relation(fields: [serviceId], references: [id])
  schedule     Schedule?  @relation(fields: [scheduleId], references: [id])
  customer     Customer?  @relation(fields: [customerId], references: [id])
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  barberId     String
  serviceId    String?
  scheduleId   String?
  customerId   String?
  barbershopId String

  @@map("appointments")
}

model Payment {
  id            String      @id @default(uuid())
  paymentDate   DateTime?
  status        String?
  transactionId String?
  paymentMethod String?
  fee           Int?
  amount        Int?
  installments  Int?
  total         Int?
  customer      Customer?   @relation(fields: [customerId], references: [id])
  barbershop    Barbershop? @relation(fields: [barbershopId], references: [id])
  service       Service?    @relation(fields: [serviceId], references: [id])
  barber        Barber?     @relation(fields: [barberId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  customerId    String?
  barbershopId  String?
  serviceId     String?
  barberId      String?
  type          String?
  balances      Balance[]
  order         Order?      @relation(fields: [orderId], references: [id])
  orderId       String?

  @@map("payments")
}

model Balance {
  id           String      @id @default(uuid())
  paymentDate  DateTime?
  status       String?
  amount       Int?
  payment      Payment?    @relation(fields: [paymentId], references: [id])
  type         String?
  customer     Customer?   @relation(fields: [customerId], references: [id])
  barbershop   Barbershop? @relation(fields: [barbershopId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  customerId   String?
  barbershopId String?
  paymentId    String?

  @@map("balances")
}

model Order {
  id            String      @id @default(uuid())
  status        String?
  amount        Int?
  fee           Int?
  total         Int?
  installments  Int?
  paymentMethod String?
  servicesIds   String?
  customer      Customer?   @relation(fields: [customerId], references: [id])
  barbershop    Barbershop? @relation(fields: [barbershopId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  customerId    String?
  barbershopId  String?
  payments      Payment[]

  @@map("orders")
}

model Plan {
  id                  String         @id @default(uuid())
  interval            String?
  price               Int?
  billingType         String?
  chargeGatewayPlanId String?
  service             Service?       @relation(fields: [serviceId], references: [id])
  barbershop          Barbershop?    @relation(fields: [barbershopId], references: [id])
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  barbershopId        String?
  serviceId           String?
  subscriptions       Subscription[]

  @@map("plans")
}

model Subscription {
  id                          String      @id @default(uuid())
  plan                        Plan?       @relation(fields: [planId], references: [id])
  customer                    Customer?   @relation(fields: [customerId], references: [id])
  barbershop                  Barbershop? @relation(fields: [barbershopId], references: [id])
  barber                      Barber?     @relation(fields: [barberId], references: [id])
  schedule                    Schedule?   @relation(fields: [scheduleId], references: [id])
  cardId                      String?
  planId                      String?
  customerId                  String?
  barbershopId                String?
  barberId                    String?
  chargeGatewaySubscriptionId String?
  active                      Boolean     @default(false)
  scheduleId                  String?
  canceledAt                  DateTime?

  @@map("subscriptions")
}
